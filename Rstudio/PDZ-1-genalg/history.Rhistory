type = "b",
main = "The time of resolving genalg according to population size and iterations number"
)
# plot the results
plot(rbga_results[,c(1,4)],
type = "b",
main = "Genethic algorithm efficiency according to population size and iterations number",
xlab = "Genalg: population size and iterations number for rbga method"
)
# plot the results
plot(rbga_results[,c(1,4)],
type = "b",
main = "Genethic algorithm efficiency according to population size and iterations number",
xlab = "Population size and iterations number for rbga method"
)
# plot the results
plot(rbga_results[,c(1,4)],
type = "b",
col = "red",
main = "Genethic algorithm efficiency according to population size and iterations number",
xlab = "Population size and iterations number for rbga method"
)
# You can save the labyrinth as .pdf file
{
pdf(file = "labyrinth.pdf",
width=5,
height=5,
paper='a4',
pagecentre = T,
onefile = F)
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
dev.off()
}
{
pdf(file = "genalg_results.pdf",
width=5,
height=5,
paper='a4',
pagecentre = T,
onefile = F)
plot(rbga_results[,c(1,4)],
type = "b",
col = "red",
main = "Genethic algorithm efficiency according to population size and iterations number",
xlab = "Population size and iterations number for rbga method"
)
dev.off()
}
{
pdf(file = "genalg_results.pdf",
width=6,
height=4,
paper='a4r',
pagecentre = T,
onefile = F)
plot(rbga_results[,c(1,4)],
type = "b",
col = "red",
main = "Genethic algorithm efficiency according to population size and iterations number",
xlab = "Population size and iterations number for rbga method"
)
dev.off()
}
{
pdf(file = "genalg_results.pdf",
width=6,
height=4,
paper='a4r',
pagecentre = T,
onefile = F)
plot(rbga_results[,c(1,4)],
type = "b",
col = "red",
main = "Genethic algorithm efficiency according to population size and iterations number",
xlab = "Population size and iterations number for rbga method"
)
dev.off()
}
{
pdf(file = "genalg_results.pdf",
#      width=6,
height=5,
paper='a4r',
pagecentre = T,
onefile = F)
plot(rbga_results[,c(1,4)],
type = "b",
col = "red",
main = "Genethic algorithm efficiency according to population size and iterations number",
xlab = "Population size and iterations number for rbga method"
)
dev.off()
}
{
pdf(file = "genalg_results.pdf",
#      width=6,
height=5,
paper='a4r',
pagecentre = T,
onefile = F)
plot(rbga_results[,c(1,4)],
type = "b",
col = "red",
main = "Genethic algorithm efficiency according to population size and iterations number",
xlab = "Population size and iterations number for rbga method"
)
dev.off()
}
{
pdf(file = "genalg_results.pdf",
#      width=6,
height=4,
paper='a4r',
pagecentre = T,
onefile = F)
plot(rbga_results[,c(1,4)],
type = "b",
col = "red",
main = "Genethic algorithm efficiency according to population size and iterations number",
xlab = "Population size and iterations number for rbga method"
)
dev.off()
}
{
pdf(file = "genalg_results.pdf",
#      width=6,
height=4,
paper='a4r',
pagecentre = T,
onefile = F)
plot(rbga_results[,c(1,4)],
type = "b",
col = "red",
main = "Genalg efficiency according to population size and iterations number",
xlab = "Population size and iterations number for rbga method"
)
dev.off()
}
lab_size <- as.integer(readline(prompt = "Podaj rozmiar labiryntu:"))
generate_lab <- (function(y) apply(matrix(nrow = y, ncol =y), c(1,2), function(x) sample(c(0,1),1)))
lab_x <- generate_lab(lab_size)
lab_x
lab_x[nrow(labyrinth),ncol(labyrinth)] <- 0
lab_x[nrow(lab_x),ncol(lab_x)] <- 0
lab_x
#clear the start and exit
lab_x[nrow(lab_x),ncol(lab_x)] <- 0;
lab_x
lab_xx = matrix(data = 1,
nrow = lab_size + 2,
ncol = lab_size + 2)
lab_xx
lab_xx[2:11] <- 0
lab_xx
lab_xx[2:11,2:11] <- 0
lab_xx
lab_xx = matrix(data = 1,
nrow = lab_size + 2,
ncol = lab_size + 2)
lab_xx[2:11,2:11] <- 0
lab_xx
lab_xx[2:11,2:11] <- lab_x
lab_xx
lab_x
#add borders
{
lab_xx = matrix(data = 1,
nrow = lab_size + 2,
ncol = lab_size + 2)
lab_x <- (lab_xx[2:11,2:11] <- lab_x)
}
lab_xx
lab_x <- generate_lab(lab_size)
#clear the start and exit
lab_x[nrow(lab_x),ncol(lab_x)] <- 0;
lab_x[1,1] <- 0
#clear the start and exit
{
lab_x[nrow(lab_x),ncol(lab_x)] <- 0;
lab_x[1,1] <- 0
}
#clear the start and exit
{
lab_x[nrow(lab_x),ncol(lab_x)] <- 0;
lab_x[1,1] <- 0
}
#add borders
{
lab_xx = matrix(data = 1,
nrow = lab_size + 2,
ncol = lab_size + 2)
lab_x <- (lab_xx[2:11,2:11] <- lab_x)
}
lab_x
#add borders
{
lab_xx = matrix(data = 1,
nrow = lab_size + 2,
ncol = lab_size + 2)
lab_x <- (lab_xx[2:11,2:11] <- lab_x)
}
lab_x
lab_size
lab_xx = matrix(data = 1,
nrow = lab_size + 2,
ncol = lab_size + 2)
lab_xx
lab_xxx <- (lab_xx[2:11,2:11] <- lab_x)
lab_xxx
lab_x
lab_xx = matrix(data = 1,
nrow = lab_size + 2,
ncol = lab_size + 2)
lab_xx
lab_name <- readline(prompt = "Podaj nazwę labiryntu:")
lab_x <- generate_lab(lab_size)
#clear the start and exit
{
lab_x[nrow(lab_x),ncol(lab_x)] <- 0;
lab_x[1,1] <- 0
}
lab_xx = matrix(data = 1,
nrow = lab_size + 2,
ncol = lab_size + 2)
lab_xx
lab_xx[2:11,2:11] <- lab_x
lab_xx
lab_name <- lab_xx
lab_name
lab_name <- readline(prompt = "Podaj nazwę labiryntu:")
#create labyrinth matrix with given name and content from lab_xx
newlab = function() {lab_name <- matrix(lab_xx); return(lab_name)}
lab5
newlab(lab_name)
lab_name
#create labyrinth matrix with given name and content from lab_xx
newlab = function() {m_name <- lab_xx; return(m_name)}
newlab(lab_name)
#create labyrinth matrix with given name and content from lab_xx
newlab = function() {m <- lab_xx; return(m)}
#create labyrinth matrix with given name and content from lab_xx
newlab = function(m) {m <- lab_xx; return(m)}
newlab(lab_name)
lab5
lab_name
lab_name
newlab(readline(prompt = "Podaj nazwę labiryntu:"))
lab_xx
lab5 <- lab_xx
lab_xx
lab5 <- lab_xx
lab5 <- lab_xx
labyrinth <- lab5
# set the size of the labyrinth, according to it's actual dimensions
lab_size <- nrow(labyrinth) - 2; lab_size
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
lab5[3,7] <- 0
labyrinth <- lab5
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth <- lab5
lab5[3,7] <- 0
labyrinth <- lab5
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[3,7] <- 0
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[4,8] <- 0
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[10,10] <- 0
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
lab5 <- labyrinth
# You can save the labyrinth as .pdf file
{
pdf(file = "lab5.pdf",
width=5,
height=5,
paper='a4',
pagecentre = T,
onefile = F)
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
dev.off()
}
# You can save the labyrinth as .pdf file
{
pdf(file = "lab1.pdf",
width=5,
height=5,
paper='a4',
pagecentre = T,
onefile = F)
pheatmap(lab1, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
dev.off()
}
evaluate3 <- function(string=c()) {
x <- 2;
y <- 2;
exit_coordinates <- lab_size * 2 + 2;
returnVal3 <- exit_coordinates;
for(step in 1:40) { if (x==11 & y==11) { returnVal2 = 0; break
} else if (round(string[step],0)==1 & labyrinth[x-1,y]==0) { x <- (x - 1)
} else if (round(string[step],0)==2 & labyrinth[x+1,y]==0) { x <- (x + 1)
} else if (round(string[step],0)==3 & labyrinth[x,y+1]==0) { y <- (y + 1)
} else if (round(string[step],0)==4 & labyrinth[x,y-1]==0) { y <- (y - 1)
} else next
}
returnVal3 <- (exit_coordinates - x - y);
returnVal3
}
v_exit_lab1 <- c(3,4,1,2,3,3,2,3,3,1,3,3,2,2,2,2,2,3,3,2,3,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3)
evaluate3(v_exit_lab1)
labyrinth <- lab1
evaluate3(v_exit_lab1)
vMin <- rep(0.51, lab_size * 4); vMax <- rep(4.49, lab_size * 4)
echo(labyrinth)
cat(labyrinth)
paste(labyrinth)
labyrinth.name
name(labyrinth)
lab_x <- generate_lab(lab_size)
#clear the start and exit
{
lab_x[nrow(lab_x),ncol(lab_x)] <- 0;
lab_x[1,1] <- 0
}
lab_xx = matrix(data = 1,
nrow = lab_size + 2,
ncol = lab_size + 2)
lab_xx[2:11,2:11] <- lab_x
lab4 <- lab_xx
labyrinth <- lab4
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[5,2] <- 0
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[4,2] <- 0
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[9,3] <- 0
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[10,2] <- 0
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[10,10] <- 1
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[3,3] <- 1
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[9,3] <- 1
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[10,3] <- 1
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[9,3] <- 0
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[11,10] <- 0
labyrinth[10,9] <- 0
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[7,5] <- 0
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[3,4] <- 0
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[4,4] <- 0
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[4,4] <- 0
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[5,4] <- 0
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth[8,9] <- 0
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
#save corrected labyrinth if needed
lab4 <- labyrinth
genalg4_labyrinth <- rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*10, iters=lab_size*10,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
summary(genalg4_labyrinth, echo=T)
plot(genalg4_labyrinth)
genalg4_labyrinth$best
lab1
pheatmap(lab1, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
pheatmap(lab2, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
pheatmap(lab3, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
pheatmap(lab4, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
pheatmap(lab5, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
save.image("D:/Mgr_Inf/Rstudio/PDZ-1-genalg/environment.RData")
savehistory("D:/Mgr_Inf/Rstudio/PDZ-1-genalg/history.Rhistory")
