library(gmodels)
merge
packages(gmodels)
install.packages("gmodels")
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))
# Build your own `normalize()` function
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
iris.training <- iris[ind==1, 1:4]
iris.test <- iris[ind==2, 1:4]
iris.trainLabels <- iris[ind==1,5]
iris.testLabels <- iris[ind==2, 5]
iris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)
install.packages("gmodels")
library(gmodels)
iris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)
# Build your own `normalize()` function
package.install("class")
# Build your own `normalize()` function
install.packages("class")
library(class)
iris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)
irisTestLabels <- data.frame(iris.testLabels)
# `iris.testLabels` ->  data frame
irisTestLabels <- data.frame(iris.testLabels)
# Merge `iris_pred` and `iris.testLabels`
merge <- data.frame(iris_pred, iris.testLabels)
# Specify column names for `merge`
names(merge) <- c("Predicted Species", "Observed Species")
# Inspect `merge`
merge
install.packages("gmodels")
install.packages("gmodels")
library(gmodels)
CrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE)
CheckKNNClassificationResults <- function(dataset) {
rows <- nrow(dataset)
counter <- 0
for(i in 1:rows) {
if(dataset[i,1] == dataset[i,2])
{
counter <- counter + 1
}
}
passrate <- counter/rows * 100
out <- paste("Total ammount of tests:", rows, "Passed:", counter, "Failed:", rows-counter, "Passrate:", passrate, "%", sep=" ")
return(out)
}
test <- CheckKNNClassificationResults(merge)
test
test_result <- CheckKNNClassificationResults(merge)
test_result
model <- naiveBayes(Species ~ ., data = iris)
# ZAD 3)
install.packages("NaiveBayes")
# ZAD 3)
install.packages("e1071")
library(e1071)
model <- naiveBayes(Species ~ ., data = iris)
predictions=predict(model,iris.test)
merge <- data.frame(predictions, iris.testLabels)
names(merge) <- c("Predicted Species", "Observed Species")
merge
r <- CheckClassificationResults(merge)
r <- CheckClassificationResults(merge)
r <- CheckClassificationResults(merge)
CheckKNNClassificationResults <- function(dataset) {
rows <- nrow(dataset)
counter <- 0
for(i in 1:rows) {
if(dataset[i,1] == dataset[i,2])
{
counter <- counter + 1
}
}
passrate <- counter/rows * 100
out <- paste("Total ammount of tests:", rows, "Passed:", counter, "Failed:", rows-counter, "Passrate:", passrate, "%", sep=" ")
return(out)
}
r <- CheckKNNClassificationResults(merge)
r
getworkspace()
getws()
getwd()
setwd("H:\Mgr_Inf\Rstudio\LAB4"")
# ZAD 2)
# Build your own `normalize()` function
install.packages("class")
library(class)
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
iris.training <- iris[ind==1, 1:4]
iris.test <- iris[ind==2, 1:4]
iris.trainLabels <- iris[ind==1,5]
iris.testLabels <- iris[ind==2, 5]
iris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)
irisTestLabels <- data.frame(iris.testLabels)
# `iris.testLabels` ->  data frame
irisTestLabels <- data.frame(iris.testLabels)
# Merge `iris_pred` and `iris.testLabels`
merge <- data.frame(iris_pred, iris.testLabels)
# Specify column names for `merge`
names(merge) <- c("Predicted Species", "Observed Species")
# Inspect `merge`
merge
install.packages("gmodels")
library(gmodels)
CrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE)
CheckKNNClassificationResults <- function(dataset) {
rows <- nrow(dataset)
counter <- 0
for(i in 1:rows) {
if(dataset[i,1] == dataset[i,2])
{
counter <- counter + 1
}
}
passrate <- counter/rows * 100
out <- paste("Total ammount of tests:", rows, "Passed:", counter, "Failed:", rows-counter, "Passrate:", passrate, "%", sep=" ")
return(out)
}
test_result <- CheckKNNClassificationResults(merge)
test_result
# ZAD 3)
install.packages("e1071")
library(e1071)
model <- naiveBayes(Species ~ ., data = iris)
predictions=predict(model,iris.test)
merge <- data.frame(predictions, iris.testLabels)
names(merge) <- c("Predicted Species", "Observed Species")
merge
r <- CheckKNNClassificationResults(merge)
r
# [1] "Total ammount of tests: 40 Passed: 38 Failed: 2 Passrate: 95 %"
bayesTable <- CrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE)
# ZAD 4)
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris.training)
predictionstree=predict(iris_ctree,iris.test)
tree <- data.frame(predictionstree, iris.testLabels)
treeresults <- CheckClassificationResults(tree)
treeresults
[1] "Total ammount of tests: 40 Passed: 35 Failed: 5 Passrate: 87.5 %"
setwd("H:/Mgr_Inf/Rstudio/LAB4")
F_KNNC_results <- function(dataset) {
rows <- nrow(dataset)
counter <- 0
for(i in 1:rows) {
if(dataset[i,1] == dataset[i,2])
{
counter <- counter + 1
}
}
passrate <- counter/rows * 100
out <- paste("Total ammount of tests:", rows, "Passed:", counter, "Failed:", rows-counter, "Passrate:", passrate, "%", sep=" ")
return(out)
}
test_result <- F_KNNC_results(merge)
test_result
model <- naiveBayes(Species ~ ., data = iris)
predictions=predict(model,iris.test)
merge <- data.frame(predictions, iris.testLabels)
names(merge) <- c("Predicted Species", "Observed Species")
merge
r <- F_KNNC_results(merge)
r
bayesTable <- CrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE)
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris.training)
# ZAD 4)
library("party")
install.packages("party")
library("party")
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris.training)
library(e1071)
model <- naiveBayes(Species ~ ., data = iris)
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris.training)
Species
model <- naiveBayes(Species ~ ., data = iris)
# Read in `iris` data
iris <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"),
header = FALSE)
# Print first lines
head(iris)
# Add column names
names(iris) <- c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")
# Check the result
iris
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris.training)
iris.training$Species <- iris.trainLabels
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris.training)
predictionstree=predict(iris_ctree,iris.test)
tree <- data.frame(predictionstree, iris.testLabels)
tree_output <- F_KNNC_results(tree)
tree_output
F_KNNC_results <- function(dataset) {
rows <- nrow(dataset)
counter <- 0
for(i in 1:rows) {
if(dataset[i,1] == dataset[i,2])
{
counter <- counter + 1
}
}
passrate <- counter/rows * 100
out <- paste("Population of testgroup ", rows, "True:", counter, "False: ", rows-counter, "Passrate: ", passrate, "%", sep=" ")
return(out)
}
test_result <- F_KNNC_results(merge)
test_result
F_KNNC_results <- function(dataset) {
rows <- nrow(dataset)
counter <- 0
for(i in 1:rows) {
if(dataset[i,1] == dataset[i,2])
{
counter <- counter + 1
}
}
passrate <- counter/rows * 100
out <- paste("Population of test group ", rows, "True:", counter, "False: ", rows-counter, "Passrate: ", passrate, "%", sep=" ")
return(out)
}
test_result <- F_KNNC_results(merge)
test_result
model <- naiveBayes(Species ~ ., data = iris)
iris.training$Species <- iris.trainLabels
model <- naiveBayes(Species ~ ., data = iris)
predictions=predict(model,iris.test)
merge <- data.frame(predictions, iris.testLabels)
names(merge) <- c("Predicted Species", "Observed Species")
merge
names(merge) <- c("Predicted", "Real")
merge
r <- F_KNNC_results(merge)
r <- F_KNNC_results(merge)
r
test_result <- F_KNNC_results(merge)
test_result
names(merge) <- c("Predicted Species", "Observed Species")
merge
r <- F_KNNC_results(merge)
r
F_KNNC_results(merge)
names(merge) <- c("Predicted Species", "Observed Species")
merge
F_KNNC_results(merge)
setwd("H:/Mgr_Inf/Rstudio/LAB4")
# Read in `iris` data
iris <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"),
header = FALSE)
# Print first lines
head(iris)
# Add column names
names(iris) <- c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")
# Check the result
iris
library(class)
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
normalize <- function(x) {
up <- x - min(x)
down <- max(x) - min(x)
return (up/down)
}
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))
install.packages("ggvis")
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
iris.training <- iris[ind==1, 1:4]
iris.test <- iris[ind==2, 1:4]
iris.trainLabels <- iris[ind==1,5]
iris.testLabels <- iris[ind==2, 5]
iris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)
irisTestLabels <- data.frame(iris.testLabels)
# `iris.testLabels` ->  data frame
irisTestLabels <- data.frame(iris.testLabels)
# Merge `iris_pred` and `iris.testLabels`
merge <- data.frame(iris_pred, iris.testLabels)
# Specify column names for `merge`
names(merge) <- c("Predicted Species", "Observed Species")
# Inspect `merge`
merge
library(gmodels)
CrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE)
F_KNNC_results <- function(dataset) {
rows <- nrow(dataset)
counter <- 0
for(i in 1:rows) {
if(dataset[i,1] == dataset[i,2])
{
counter <- counter + 1
}
}
passrate <- counter/rows * 100
out <- paste("Population of test group ", rows, "True:", counter, "False: ", rows-counter, "Passrate: ", passrate, "%", sep=" ")
return(out)
}
CrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE)
F_KNNC_results <- function(dataset) {
rows <- nrow(dataset)
counter <- 0
for(i in 1:rows) {
if(dataset[i,1] == dataset[i,2])
{
counter <- counter + 1
}
}
passrate <- counter/rows * 100
out <- paste("Population of test group ", rows, "True:", counter, "False: ", rows-counter, "Passrate: ", passrate, "%", sep=" ")
return(out)
}
test_result <- F_KNNC_results(merge)
test_result
# ZAD 3)
install.packages("e1071")
install.packages("e1071")
library(e1071)
iris.training$Species <- iris.trainLabels
model <- naiveBayes(Species ~ ., data = iris)
predictions=predict(model,iris.test)
merge <- data.frame(predictions, iris.testLabels)
merge
F_KNNC_results(merge)
bayesTable <- CrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE)
install.packages("party")
install.packages("party")
library("party")
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris.training)
predictionstree=predict(iris_ctree,iris.test)
tree <- data.frame(predictionstree, iris.testLabels)
tree_output <- F_KNNC_results(tree)
tree_output
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
iris.training <- iris[ind==1, 1:4]
iris.test <- iris[ind==2, 1:4]
iris.trainLabels <- iris[ind==1,5]
iris.testLabels <- iris[ind==2, 5]
iris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)
irisTestLabels <- data.frame(iris.testLabels)
# `iris.testLabels` ->  data frame
irisTestLabels <- data.frame(iris.testLabels)
# Merge `iris_pred` and `iris.testLabels`
merge <- data.frame(iris_pred, iris.testLabels)
# Specify column names for `merge`
names(merge) <- c("Predicted Species", "Observed Species")
# Inspect `merge`
merge
CrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE)
F_KNNC_results <- function(dataset) {
rows <- nrow(dataset)
counter <- 0
for(i in 1:rows) {
if(dataset[i,1] == dataset[i,2])
{
counter <- counter + 1
}
}
passrate <- counter/rows * 100
out <- paste("Population of test group ", rows, "True:", counter, "False: ", rows-counter, "Passrate: ", passrate, "%", sep=" ")
return(out)
}
test_result <- F_KNNC_results(merge)
test_result
iris.training$Species <- iris.trainLabels
model <- naiveBayes(Species ~ ., data = iris)
predictions=predict(model,iris.test)
merge <- data.frame(predictions, iris.testLabels)
merge
F_KNNC_results(merge)
bayesTable <- CrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE)
F_KNNC_results(merge)
bayesTable <- CrossTable(x = iris.testLabels, y = predictions, prop.chisq=FALSE)
bayesTable <- CrossTable(x = iris.testLabels, y = predictions, prop.chisq=FALSE)
iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris.training)
predictionstree=predict(iris_ctree,iris.test)
tree <- data.frame(predictionstree, iris.testLabels)
tree_output <- F_KNNC_results(tree)
tree_output
getwd()
setwd("H:/Mgr_Inf/Rstudio/LAB6")
plecakdb <- data.frame(
wiek = c(23, 25,28,22,46,50,48),
waga = c(75, 67, 120, 65, 70, 68, 97),
wzrost = c(176, 180, 175, 165, 187, 180, 178),
gra = c("TRUE", "TRUE", "FALSE", "TRUE", "TRUE", "FALSE", "FALSE"))
fct_act <- function(x){
return(1/(1+exp(-x)))
}
forwardPass <- function(wiek,waga,wzrost){
hidden0 <- wiek* -0.46122 + waga * 0.97314 +wzrost*-0.39203 + 0.80109
hidden1 <- wiek* -0.78548 + waga * 2.10584 +wzrost*-0.57847 + 0.43529
hidden01 <- fct_act(hidden1)
hidden11 <- fct_act(hidden2)
hidden02 = hidden1*(-0.81546)
hidden22 = hidden2*1.03775
return(hidden02+hidden22+(-0.2368))
}
forwardPass(23,75,176)
forwardPass <- function(wiek,waga,wzrost){
hidden1 <- wiek* -0.46122 + waga * 0.97314 +wzrost*-0.39203 + 0.80109
hidden2 <- wiek* -0.78548 + waga * 2.10584 +wzrost*-0.57847 + 0.43529
hidden1 <- fct_act(hidden1)
hidden2 <- fct_act(hidden2)
hidden3 = hidden1*(-0.81546)
hidden4 = hidden2*1.03775
return(hidden3+hidden4+(-0.2368))
}
forwardPass(23,75,176)
save.image("H:/Mgr_Inf/Rstudio/LAB6/lab6_env.RData")
savehistory("H:/Mgr_Inf/Rstudio/LAB6/lab6_history.Rhistory")
