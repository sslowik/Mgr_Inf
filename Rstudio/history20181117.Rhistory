for(step in 1:40) { if (x==11 & y==11) { returnVal2 = 0; break
} else if (round(string[step],0)==1 & lab1[x-1,y]==0) { x <- (x - 1)
} else if (round(string[step],0)==2 & lab1[x+1,y]==0) { x <- (x + 1)
} else if (round(string[step],0)==3 & lab1[x,y+1]==0) { y <- (y + 1)
} else if (round(string[step],0)==4 & lab1[x,y-1]==0) { y <- (y - 1)
} else next
}
returnVal3 <- (exit - x - y);
returnVal3
}
evaluate3(v_exit)
v_exit
exit
# set the labyrinth
labyrinth <- readline(prompt= "Which labyrinth do you wan't to solve? Write: 'lab1', 'lab2', or 'lab3'")
labyrinth
lab1
labyrinth <- lab1
labyrinth
# draw labyrinth > pheatmap
install.packages("pheatmap")
library(pheatmap)
pheatmap(lab1, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
size <- nrow(labyrinth - 2)
size
size <- nrow(labyrinth) - 2
size
rm(size)
lab_size <- nrow(labyrinth) - 2
lab_size <- nrow(labyrinth) - 2; lab_size
evaluate3 <- function(string=c()) {
x <- 2;
y <- 2;
exit_coordinates <- lab_size + 2;
returnVal3 <- exit;
for(step in 1:40) { if (x==11 & y==11) { returnVal2 = 0; break
} else if (round(string[step],0)==1 & labyrinth[x-1,y]==0) { x <- (x - 1)
} else if (round(string[step],0)==2 & labyrinth[x+1,y]==0) { x <- (x + 1)
} else if (round(string[step],0)==3 & labyrinth[x,y+1]==0) { y <- (y + 1)
} else if (round(string[step],0)==4 & labyrinth[x,y-1]==0) { y <- (y - 1)
} else next
}
returnVal3 <- (exit_coordinates - x - y);
returnVal3
}
v_exit <- c(3,4,1,2,3,3,2,3,3,1,3,3,2,2,2,2,2,3,3,2,3,2,2  ,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1)
evaluate3(v_exit)
evaluate3 <- function(string=c()) {
x <- 2;
y <- 2;
exit_coordinates <- lab_size + 2;
returnVal3 <- exit_coordinates;
for(step in 1:40) { if (x==11 & y==11) { returnVal2 = 0; break
} else if (round(string[step],0)==1 & labyrinth[x-1,y]==0) { x <- (x - 1)
} else if (round(string[step],0)==2 & labyrinth[x+1,y]==0) { x <- (x + 1)
} else if (round(string[step],0)==3 & labyrinth[x,y+1]==0) { y <- (y + 1)
} else if (round(string[step],0)==4 & labyrinth[x,y-1]==0) { y <- (y - 1)
} else next
}
returnVal3 <- (exit_coordinates - x - y);
returnVal3
}
evaluate3(v_exit)
# set the size of the labyrinth, according to it's actual dimensions
lab_size <- nrow(labyrinth) - 2; lab_size
evaluate3 <- function(string=c()) {
x <- 2;
y <- 2;
exit_coordinates <- lab_size * 2 + 2;
returnVal3 <- exit_coordinates;
for(step in 1:40) { if (x==11 & y==11) { returnVal2 = 0; break
} else if (round(string[step],0)==1 & labyrinth[x-1,y]==0) { x <- (x - 1)
} else if (round(string[step],0)==2 & labyrinth[x+1,y]==0) { x <- (x + 1)
} else if (round(string[step],0)==3 & labyrinth[x,y+1]==0) { y <- (y + 1)
} else if (round(string[step],0)==4 & labyrinth[x,y-1]==0) { y <- (y - 1)
} else next
}
returnVal3 <- (exit_coordinates - x - y);
returnVal3
}
evaluate3(v_exit)
vMin <- rep(0.51, ); vMax <- rep(4.49, 40)
v_exit_lab1 <- c(3,4,1,2,3,3,2,3,3,1,3,3,2,2,2,2,2,3,3,2,3,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3)
length(v_exit_lab1)
v_exit_lab1
length(v_exit_lab1)
evaluate3(v_exit)
evaluate3(v_exit_lab1)
vMin <- rep(0.51, lab_size * 4); vMax <- rep(4.49, lab_size * 4)
vmin
vMin
length(vMin)
# genalg
genalg_labyrinth <- rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*10, iters=lab_size*10,
mutationChance=0.1,
elitism=0.2,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
# genalg
genalg_labyrinth <- rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*10, iters=lab_size*10,
mutationChance=0.1,
elitism=0.2,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
library(genalg)
genalg_labyrinth <- rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*10, iters=lab_size*10,
mutationChance=0.1,
elitism=0.2,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
genalg_labyrinth <- rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*10, iters=lab_size*10,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
summary(genalg_labyrinth, echo=T)
plot(genalg_labyrinth)
genalg_labyrinth$best
system.time(genalg1_labyrinth)
#evaluate the system time for given genetic algorithm
system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*10, iters=lab_size*10,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
)
#evaluate the system time for given genetic algorithm and different population sizes
echo("Population size = " + (i * lab_size))
#evaluate the system time for given genetic algorithm and different population sizes
print("Population size = " + (i * lab_size))
write(sad)
print(sadf)
print("sadf")
#evaluate the system time for given genetic algorithm and different population sizes
print("Population size = " & (i * lab_size))
#evaluate the system time for given genetic algorithm and different population sizes
print("Population size = "  (i * lab_size))
#evaluate the system time for given genetic algorithm and different population sizes
print("Population size = " lab_size)
#evaluate the system time for given genetic algorithm and different population sizes
print("Population size = " & lab_size)
#evaluate the system time for given genetic algorithm and different population sizes
print("Population size = "  "lab_size")
#evaluate the system time for given genetic algorithm and different population sizes
print("Population size = "  + "lab_size")
#evaluate the system time for given genetic algorithm and different population sizes
print("Population size = "  & "lab_size")
#evaluate the system time for given genetic algorithm and different population sizes
print("Population size = "  , "lab_size")
#evaluate the system time for given genetic algorithm and different population sizes
print("Population size = ", lab_size)
lab_size
#evaluate the system time for given genetic algorithm and different population sizes
print("Population size = ",lab_size)
#evaluate the system time for given genetic algorithm and different population sizes
cat("Population size = ",lab_size)
for (i in 1:lab_size) {
cat("Population size = ",i * lab_size)
}
for (i in 1:lab_size) {
cat("Population size = ",i * lab_size);
system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*10, iters=100,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
)
}
for (i in 1:2) {
cat("Population size = ",i * lab_size);
cat(system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*10, iters=100,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
))
}
for (i in 1:2) {
cat("Population size = ", i * lab_size, sep="\n");
cat(system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*10, iters=100,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
), sep="\n")
}
for (i in 1:2) {
cat("Population size = ", i * lab_size, sep="\n");
cat(system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*10, iters=100,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
))
}
for (i in 1:lab_size) {
cat("Population size = ", i * lab_size, sep="\n");
cat(system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*i, iters=lab_size*i,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
))
cat("\n")
}
system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*i, iters=lab_size*i,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
)
for (i in 1:lab_size) {
cat("Population size and iterations = ", i * lab_size)
cat("\n")
paste(system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*i, iters=lab_size*i,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
))
cat("\n")
}
for (i in 1:lab_size) {
cat("Population size and iterations = ", i * lab_size)
cat("\n")
cat(paste(system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*i, iters=lab_size*i,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
)))
cat("\n")
}
for (i in 1:lab_size) {
cat("Population size and iterations = ", i * lab_size)
cat("\n")
cat(system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*i, iters=lab_size*i,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
))
cat("\n")
}
a <- matrix(1:5)
a
a <- rbind(a, 6)
a
rbga_results <- (matrix(data = NA, nrow = 1, ncol = 6))
rbga_results
colnames(rbga_results) <- c("generations", "user", "system", "time", '5', '6' )
rbga_results
rbga_results <- (matrix(data = NA, nrow = lab_size, ncol = 6))
rbga_results
colnames(rbga_results) <- c("generations", "user", "system", "time", '5', '6' )
rbga_results
colnames(rbga_results) <- c("pop&iter", "user", "system", "time", '5', '6' )
rbga_results
for (i in 1:lab_size) {
rbga_results[i,] <- c(i, system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*i, iters=lab_size*i,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
))
}
rbga_results
system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*10, iters=lab_size*10,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
)
system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*1, iters=lab_size*1,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
)
# save the labyrinth as .jpg file
{
jpg(file.jpg,width=6,height=4,paper='special')
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
dev.off()
}
# save the labyrinth as .jpg file
{
pdf(file.pdf,width=6,height=4,paper='special')
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
dev.off()
}
# save the labyrinth as .jpg file
{
pdf(file = "file.pdf",width=6,height=4,paper='special')
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
dev.off()
}
# save the labyrinth as .pdf file
{
pdf(file = if(onefile) "labyrinth.pdf" else "labyrinth%03d.pdf",
width=6,
height=4,
paper='special',
pagecentre = T)
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
dev.off()
}
# save the labyrinth as .pdf file
{
pdf(file = "labyrinth.pdf",
width=6,
height=4,
paper='special',
pagecentre = T)
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
dev.off()
}
# save the labyrinth as .pdf file
{
pdf(file = "labyrinth.pdf",
width=0,
height=0,
paper='a4r',
pagecentre = T)
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
dev.off()
}
# save the labyrinth as .pdf file
{
pdf(file = "labyrinth.pdf",
width=4,
height=6,
paper='a4r',
pagecentre = T)
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
dev.off()
}
# save the labyrinth as .pdf file
{
pdf(file = "labyrinth.pdf",
width=0,
height=0,
paper='a4',
pagecentre = T)
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
dev.off()
}
# save the labyrinth as .pdf file
{
pdf(file = "labyrinth.pdf",
width=5,
height=5,
paper='a4',
pagecentre = T)
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
dev.off()
}
# save the labyrinth as .pdf file
{
pdf(file = "labyrinth.pdf",
width=5,
height=5,
paper='a4',
pagecentre = T,
onefile = F)
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
dev.off()
}
# save the labyrinth as .pdf file
{
pdf(file = "labyrinth.pdf",
width=5,
height=5,
paper='a4',
pagecentre = T,
onefile = F)
cat("My labyrinth");
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
dev.off()
}
# save the labyrinth as .pdf file
{
pdf(file = "labyrinth.pdf",
width=5,
height=5,
paper='a4',
pagecentre = T,
onefile = F)
cat("My labyrinth");
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
dev.off()
}
"msdkjf"
# save the labyrinth as .pdf file
{
pdf(file = "labyrinth.pdf",
width=5,
height=5,
paper='a4',
pagecentre = T,
onefile = F)
"My labyrinth";
pheatmap(labyrinth, cellwidth = 20,
cellheight = 20,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
dev.off()
}
clear
rm
save.image("D:/Mgr_Inf/Rstudio/environment20181117.RData")
savehistory("D:/Mgr_Inf/Rstudio/history20181117.Rhistory")
