ZAD 2)

iris_norm <- as.data.frame(lapply(iris[1:4], normalize))
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
iris.training <- iris[ind==1, 1:4]
iris.test <- iris[ind==2, 1:4]
iris.trainLabels <- iris[ind==1,5]
iris.testLabels <- iris[ind==2, 5]
iris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)
irisTestLabels <- data.frame(iris.testLabels)
# Put `iris.testLabels` in a data frame
irisTestLabels <- data.frame(iris.testLabels)

# Merge `iris_pred` and `iris.testLabels` 
merge <- data.frame(iris_pred, iris.testLabels)

# Specify column names for `merge`
names(merge) <- c("Predicted Species", "Observed Species")

# Inspect `merge` 
merge
library(gmodels)
> CrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE)

CheckKNNClassificationResults <- function(dataset) {
  rows <- nrow(dataset)
  counter <- 0
  for(i in 1:rows) {
    if(dataset[i,1] == dataset[i,2])
    {
      counter <- counter + 1
    }
  }
  passrate <- counter/rows * 100
  out <- paste("Total ammount of tests:", rows, "Passed:", counter, "Failed:", rows-counter, "Passrate:", passrate, "%", sep=" ")
  return(out)
}

> test <- CheckKNNClassificationResults(merge)
> test

ZAD 3)
model <- naiveBayes(Species ~ ., data = iris)
predictions=predict(model,iris.test)
> merge <- data.frame(predictions, iris.testLabels)
> names(merge) <- c("Predicted Species", "Observed Species")
merge
 r <- CheckClassificationResults(merge)
> r
[1] "Total ammount of tests: 40 Passed: 33 Failed: 7 Passrate: 82.5 %"
bayesTable <- CrossTable(x = iris.testLabels, y = iris_pred, prop.chisq=FALSE)


ZAD 4)
 iris_ctree <- ctree(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris.training)
predictionstree=predict(iris_ctree,iris.test)
tree <- data.frame(predictionstree, iris.testLabels)
treeresults <- CheckClassificationResults(tree)
treeresults
[1] "Total ammount of tests: 40 Passed: 35 Failed: 5 Passrate: 87.5 %"