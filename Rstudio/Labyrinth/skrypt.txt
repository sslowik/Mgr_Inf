> labyrinth
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12]
 [1,]    1    1    1    1    1    1    1    1    1     1     1     1
 [2,]    1    0    0    0    0    0    1    0    1     0     1     1
 [3,]    1    1    0    0    0    0    0    0    1     1     1     1
 [4,]    1    0    1    0    1    0    0    1    1     0     1     1
 [5,]    1    0    0    1    0    1    0    0    0     1     1     1
 [6,]    1    1    0    0    0    0    1    1    0     1     1     1
 [7,]    1    1    0    1    1    0    1    0    0     0     0     1
 [8,]    1    1    0    1    1    0    0    0    0     0     1     1
 [9,]    1    1    0    0    0    1    0    1    1     1     1     1
[10,]    1    1    0    0    1    0    0    1    0     0     0     1
[11,]    1    1    1    0    0    1    0    0    0     1     0     1
[12,]    1    1    1    1    1    1    1    1    1     1     1     1 



vMin <- rep(0.51, 40)
vMax <- rep(4.49, 40)

#step up - 1
#step down - 2
#step right - 3
#step left - 4


evaluate1 <- function(string=c()) {
  xx <- 2; 
  yy <- 2; 

  for(step in 1:40) {
  
    if 			(round(string[step] == 1) && labyrinth[xx - 1 , yy] == 0 ) { 
			xx <- xx - 1; 
    } else if 	(round(string[step] == 1) && labyrinth[xx - 1 , yy] == 1 ) {
			break; 
	} else if 	(round(string[step] == 2) && labyrinth[xx + 1 , yy] == 0 ) { 
			xx <- xx + 1; 
    } else if 	(round(string[step] == 2) && labyrinth[xx + 1 , yy] == 1 ) {
			break;
	} else if 	(round(string[step] == 3) && labyrinth[xx , yy + 1] == 0 ) { 
			yy <- yy + 1; 
    } else if 	(round(string[step] == 3) && labyrinth[xx , yy + 1] == 1 ) {
			break;
	} else if 	(round(string[step] == 4) && labyrinth[xx , yy - 1] == 0 ) { 
			yy <- yy - 1; 
    } else if 	(round(string[step] == 4) && labyrinth[xx + 1 , yy] == 1 ) {
				break;
    }
	returnVal <- (22 - xx - yy);
	}
	returnVal
}


evaluate2 <- function(string=c()) {
  x <- 2; 
  y <- 2; 
  returnVal2 = 40;
  for(step in 1:40) {
    
    if 	((x != 11 & y != 11) round(string[step],0) == 1 & labyrinth[x - 1 , y] == 0) { 
      x <- x - 1;
      returnVal2 <- (22 - x - y);	
    } else if 	
    (round(string[step],0) == 2 & labyrinth[x + 1 , y] == 0) { 
      x <- x + 1; 
      returnVal2 <- (22 - x - y);
    } else if 	
    (round(string[step],0) == 3 & labyrinth[x , y + 1] == 0) { 
      y <- y + 1; 
      returnVal2 <- (2 - x - y);
    } else if 	
    (round(string[step],0) == 4 & labyrinth[x , y - 1] == 0) { 
      y <- y - 1; 
      returnVal2 <- (22 - x - y);
    } else if 
    (x == 11 & y == 11) {
      break;
    }
  }	
  returnVal2
}


#step up - 1
#step down - 2
#step right - 3
#step left - 4

evaluate3 <- function(string=c()) {
  x <- 2; 
  y <- 2; 
  returnVal3 <- 22;
  
  for(step in 1:40) { if (x==11 & y==11) { returnVal2 = 0; break
	} else if (round(string[step],0)==1 & labyrinth[x-1,y]==0) { x <- (x - 1)	
    } else if (round(string[step],0)==2 & labyrinth[x+1,y]==0) { x <- (x + 1) 
    } else if (round(string[step],0)==3 & labyrinth[x,y+1]==0) { y <- (y + 1) 
    } else if (round(string[step],0)==4 & labyrinth[x,y-1]==0) { y <- (y - 1) 
    } else next 
    }
	returnVal3 <- (22 - x - y); 
	returnVal3
  }	
  


