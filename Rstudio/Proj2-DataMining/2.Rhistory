} else if (round(string[step],0)==2 & labyrinth[x+1,y]==0) { x <- (x + 1)
} else if (round(string[step],0)==3 & labyrinth[x,y+1]==0) { y <- (y + 1)
} else if (round(string[step],0)==4 & labyrinth[x,y-1]==0) { y <- (y - 1)
} else next
}
returnVal3 <- (exit_coordinates - x - y);
returnVal3
}
# set the min and max values for the genes of float chromosome
# for rbga function
lab_size
vMin <- rep(0.51, lab_size * 4); vMax <- rep(4.49, lab_size * 4)
library(genalg)
genalg_labyrinth <- rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=200, iters=200,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
plot(genalg_labyrinth)
system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=200, iters=200,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
)
genalg2_labyrinth$best
plot(genalg_labyrinth)
genalg_labyrinth$best
plot(genalg_labyrinth)
genalg_labyrinth$best
# or create matrix with results for different popsize and iterations number
{
rbga_results <- (matrix(data = NA, nrow = lab_size, ncol = 6))
colnames(rbga_results) <- c("pop&iter", "user", "system", "time", '5', '6' )
for (i in 1:lab_size) {
rbga_results[i,] <- c(i * lab_size, system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*i, iters=lab_size*i,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
))
}
rbga_results
}
# plot the results
plot(rbga_results[,c(1,4)],
type = "b",
col = "red",
main = "Genethic algorithm efficiency according to population size and iterations number",
xlab = "Population size and iterations number for rbga method"
)
labyrinth <- lab15
pheatmap(labyrinth, cellwidth = 15,
cellheight = 15,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
# set the variable for the size of choosen labyrinth
lab_size <- nrow(labyrinth) - 2; lab_size
evaluate3 <- function(string=c()) {
x <- 2;
y <- 2;
exit_coordinates <- lab_size * 2 + 2;
returnVal3 <- exit_coordinates;
for(step in 1:40) { if (x==11 & y==11) { returnVal2 = 0; break
} else if (round(string[step],0)==1 & labyrinth[x-1,y]==0) { x <- (x - 1)
} else if (round(string[step],0)==2 & labyrinth[x+1,y]==0) { x <- (x + 1)
} else if (round(string[step],0)==3 & labyrinth[x,y+1]==0) { y <- (y + 1)
} else if (round(string[step],0)==4 & labyrinth[x,y-1]==0) { y <- (y - 1)
} else next
}
returnVal3 <- (exit_coordinates - x - y);
returnVal3
}
vMin <- rep(0.51, lab_size * 4); vMax <- rep(4.49, lab_size * 4)
genalg_labyrinth <- rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=200, iters=200,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
plot(genalg_labyrinth)
genalg_labyrinth$best
# or create matrix with results for different popsize and iterations number
{
rbga_results <- (matrix(data = NA, nrow = lab_size, ncol = 6))
colnames(rbga_results) <- c("pop&iter", "user", "system", "time", '5', '6' )
for (i in 1:lab_size) {
rbga_results[i,] <- c(i * lab_size, system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*i, iters=lab_size*i,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
))
}
rbga_results
}
# plot the results
plot(rbga_results[,c(1,4)],
type = "b",
col = "red",
main = "Genethic algorithm efficiency according to population size and iterations number",
xlab = "Population size and iterations number for rbga method"
)
{
pdf(file = "genalg_results_lab15.pdf",
#      width=6,
height=4,
paper='a4r',
pagecentre = T,
onefile = F)
plot(rbga_results[,c(1,4)],
type = "b",
col = "red",
main = "Genalg efficiency according to population size and iterations number",
xlab = "Population size and iterations number for rbga method"
)
dev.off()
}
evaluate3 <- function(string=c()) {
x <- 2;
y <- 2;
exit_coordinates <- lab_size * 2 + 2;
returnVal3 <- exit_coordinates;
for(step in 1:40) { if (x==lab_size + 1 & y==lab_size + 1) { returnVal2 = 0; break
} else if (round(string[step],0)==1 & labyrinth[x-1,y]==0) { x <- (x - 1)
} else if (round(string[step],0)==2 & labyrinth[x+1,y]==0) { x <- (x + 1)
} else if (round(string[step],0)==3 & labyrinth[x,y+1]==0) { y <- (y + 1)
} else if (round(string[step],0)==4 & labyrinth[x,y-1]==0) { y <- (y - 1)
} else next
}
returnVal3 <- (exit_coordinates - x - y);
returnVal3
}
vMin <- rep(0.51, lab_size * 4); vMax <- rep(4.49, lab_size * 4)
genalg_labyrinth <- rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=100, iters=100,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
plot(genalg_labyrinth)
genalg_labyrinth$best
evaluate3 <- function(string=c()) {
x <- 2;
y <- 2;
exit_coordinates <- lab_size * 2 + 2;
returnVal3 <- exit_coordinates_sum;
for(step in 1:length(string)) { if (x==lab_size + 1 & y==lab_size + 1) { returnVal2 = 0; break
} else if (round(string[step],0)==1 & labyrinth[x-1,y]==0) { x <- (x - 1)
} else if (round(string[step],0)==2 & labyrinth[x+1,y]==0) { x <- (x + 1)
} else if (round(string[step],0)==3 & labyrinth[x,y+1]==0) { y <- (y + 1)
} else if (round(string[step],0)==4 & labyrinth[x,y-1]==0) { y <- (y - 1)
} else next
}
returnVal3 <- (exit_coordinates_sum - x - y);
returnVal3
}
vMin <- rep(0.51, lab_size * 4); vMax <- rep(4.49, lab_size * 4)
evaluate3 <- function(string=c()) {
x <- 2;
y <- 2;
exit_coordinates <- lab_size * 2 + 2;
returnVal3 <- exit_coordinates_sum;
for(step in 1:length(string)) { if (x==lab_size + 1 & y==lab_size + 1) { returnVal2 = 0; break
} else if (round(string[step],0)==1 & labyrinth[x-1,y]==0) { x <- (x - 1)
} else if (round(string[step],0)==2 & labyrinth[x+1,y]==0) { x <- (x + 1)
} else if (round(string[step],0)==3 & labyrinth[x,y+1]==0) { y <- (y + 1)
} else if (round(string[step],0)==4 & labyrinth[x,y-1]==0) { y <- (y - 1)
} else next
}
returnVal3 <- (exit_coordinates_sum - x - y);
returnVal3
}
genalg_labyrinth <- rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=200, iters=200,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
evaluate3 <- function(string=c()) {
x <- 2;
y <- 2;
exit_coordinates_sum <- lab_size * 2 + 2;
returnVal3 <- exit_coordinates_sum;
for(step in 1:length(string)) { if (x==lab_size + 1 & y==lab_size + 1) { returnVal2 = 0; break
} else if (round(string[step],0)==1 & labyrinth[x-1,y]==0) { x <- (x - 1)
} else if (round(string[step],0)==2 & labyrinth[x+1,y]==0) { x <- (x + 1)
} else if (round(string[step],0)==3 & labyrinth[x,y+1]==0) { y <- (y + 1)
} else if (round(string[step],0)==4 & labyrinth[x,y-1]==0) { y <- (y - 1)
} else next
}
returnVal3 <- (exit_coordinates_sum - x - y);
returnVal3
}
genalg_labyrinth <- rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=200, iters=200,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
plot(genalg_labyrinth)
# or create matrix with results for different popsize and iterations number
{
rbga_results <- (matrix(data = NA, nrow = lab_size, ncol = 6))
colnames(rbga_results) <- c("pop&iter", "user", "system", "time", '5', '6' )
for (i in 1:lab_size) {
rbga_results[i,] <- c(i * lab_size, system.time(
rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*i, iters=lab_size*i,
mutationChance=0.1,
elitism=T,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
))
}
rbga_results
}
# plot the results
plot(rbga_results[,c(1,4)],
type = "b",
col = "red",
main = "Genethic algorithm efficiency according to population size and iterations number",
xlab = "Population size and iterations number for rbga method"
)
labyrinth <- lab20
# set the variable for the size of choosen labyrinth
lab_size <- nrow(labyrinth) - 2; lab_size
evaluate3 <- function(string=c()) {
x <- 2;
y <- 2;
exit_coordinates_sum <- lab_size * 2 + 2;
returnVal3 <- exit_coordinates_sum;
for(step in 1:length(string)) { if (x==lab_size + 1 & y==lab_size + 1) { returnVal2 = 0; break
} else if (round(string[step],0)==1 & labyrinth[x-1,y]==0) { x <- (x - 1)
} else if (round(string[step],0)==2 & labyrinth[x+1,y]==0) { x <- (x + 1)
} else if (round(string[step],0)==3 & labyrinth[x,y+1]==0) { y <- (y + 1)
} else if (round(string[step],0)==4 & labyrinth[x,y-1]==0) { y <- (y - 1)
} else next
}
returnVal3 <- (exit_coordinates_sum - x - y);
returnVal3
}
vMin <- rep(0.51, lab_size * 4); vMax <- rep(4.49, lab_size * 4)
library(genalg)
genalg2_labyrinth <- rbga(stringMin=vMin, stringMax=vMax,
suggestions=NULL,
popSize=lab_size*10, iters=lab_size*10,
mutationChance=0.1,
elitism=F,
monitorFunc=NULL, evalFunc=evaluate3,
showSettings=FALSE, verbose=FALSE)
plot(genalg2_labyrinth)
genalg2_labyrinth$best
source('D:/Mgr_Inf/Rstudio/PDZ-1-genalg/labyrinth_generator.R', echo=TRUE)
cellheight = 15,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
pheatmap(lab_xx, cellwidth = 15,
cellheight = 15,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
generate_lab <- (function(y) apply(matrix(nrow = y, ncol =y), c(1,2), function(x) sample(c(0,1),1)))
labi_size <- as.integer(readline(prompt = "Podaj rozmiar labiryntu:"))
{
lab_x <- generate_lab(labi_size);
lab_x[nrow(lab_x),ncol(lab_x)] <- 0;
lab_x[1,1] <- 0;
lab_xx = matrix(data = 1,
nrow = labi_size + 2,
ncol = labi_size + 2);
lab_xx[2:(labi_size+1),2:(labi_size+1)] <- lab_x
}
lab_xx[11:14,11] <- 0
lab_xx[15,19] <- 0
library(pheatmap)
pheatmap(lab_xx, cellwidth = 15,
cellheight = 15,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
pheatmap(lab_xx, cellwidth = 10,
cellheight = 10,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
labyrinth <- lab20
pheatmap(labyrinth, cellwidth = 15,
cellheight = 15,
cluster_row = FALSE,
cluster_col = FALSE,
color=gray.colors(2,start=1,end=0))
# set the variable for the size of choosen labyrinth
lab_size <- nrow(labyrinth) - 2; lab_size
# plot the results
plot(rbga_results[,c(1,4)],
type = "b",
col = "red",
main = "Genethic algorithm efficiency according to population size and iterations number",
xlab = "Population size and iterations number for rbga method"
)
getwd()
setwd("d:/Mgr_Inf/Rstudio/Proj2-DataMining/")
load("D:/Mgr_Inf/Rstudio/Proj2-DataMining/.RData")
getwd()
cats <- read.csv("aac_shelter_cat_outcome.csv", header=F, sep=",")
cats <- read.csv("aac_shelter_cat_outcome.csv", header=T, sep=",")
cats <- read.csv("aac_shelter_cat_outcome_eng.csv", header=T, sep=",")
cats[1,]
cats_header <- as.vector(cats[1,])
class(cats_header)
cats_header
class(cats_h)
cats_h <- as.vector(cats_header, mode = "numeric")
class(cats_h)
cats_h
rm(cats_h)
columns(cats)
names(cats)
cats[1,]
#display the header columns names:
names(cats)
class(cats_header)
class(cats)
class(cats)
cats <- read.csv("aac_shelter_cat_outcome_eng.csv", header=T, sep=",", na.strings=" ")
getwd()
cats[1:10]
cats <- read.csv("aac_shelter_cat_outcome_eng.csv", header=T, sep=",", na.strings="NA")
cats[1:10]
cats <- read.csv("aac_shelter_cat_outcome_eng.csv", header=T, sep=",", na.strings="NA", nrows=10000)
nrow(cats)
cats[1:10]
rm(cats_header)
cats[1,]
#display the header columns names:
names(cats)
cats$animal_id <- NA
#display the header columns names:
names(cats)
cats[1,]
cats$animal_id <- NULL
#display the header columns names:
names(cats)
cats[ ,c('animal_type', 'color2')] <- list(NULL)
#display the header columns names:
names(cats)
cats <- read.csv("aac_shelter_cat_outcome_eng.csv", header=T, sep=",", na.strings="NA", nrows=10000)
nrow(cats)
#display the header columns names:
names(cats)
cats_f <- read.csv("aac_shelter_cat_outcome_eng.csv", header=T, sep=",", na.strings="NA", nrows=10000)
cats_f[1,]
#display the header columns names:
names(cats_f)
cats <- (cats$animal_id <- NULL)
names(cats)
names(cats)
cats <- (cats_f$animal_id <- NULL)
names(cats)
cats <- cats_f
names(cats)
names(cats)
cats_f <- read.csv("aac_shelter_cat_outcome_eng.csv", header=T, sep=",", na.strings="NA", nrows=10000)
# input cats_f into target data_frame - it's easier to repeat steps
cats <- cats_f
#removing redundant columns -different methods
# by specific column name
cats$animal_id <- NULL
names(cats)
#by columns numbers
cats[,c(2)] <- list(NULL)
names(cats)
View(cats_training)
View(cats_f)
View(cats)
#by columns names, #vector with columns to delete:
redundant <- c('animal_id', 'animal_type', 'coat_pattern', 'color2', "Periods", "Period.Range", "outcome_age_.years.")
cats[,redundant] <- list(NULL)
names(cats)
# input cats_f into target data_frame - it's easier to repeat steps
cats <- cats_f
names(cats)
#by columns numbers
cats[,c(1,2,3)] <- list(NULL)
names(cats)
#by columns names, #vector with columns to delete:
redundant <- c("date_of_birth",
"datetime",
"monthyear",
"coat_pattern",
"color2",
"Periods",
"Period.Range",
"outcome_age_.years.")
cats[,redundant] <- list(NULL)
names(cats)
View(cats)
#by columns names, #vector with columns to delete:
redundant <- c("date_of_birth",
"datetime",
"monthyear",
"coat_pattern",
"color2",
"Periods",
"Period.Range",
"outcome_age_.years.",
"breed1",
"breed2")
cats[,redundant] <- list(NULL)
names(cats)
cats$name[cats$name=="NA"] <- "noname"
levels(cats$name)
levels(cats$name) <- c(levels(cats$name), "noname")
cats$name[cats$name=="NA"] <- "noname"
View(cats)
cats$name[cats$name==""] <- "noname"
y <- gl(2, 4, 8)
levels(y) <- c("low", "high")
y
levels(cats$sex_upon_outcome)
names(cats)
levels(cats$age_group)
levels(cats$outcome_subtype)
#by columns names, #vector with columns to delete:
redundant <- c("date_of_birth",
"datetime",
"monthyear",
"outcome_subtype",
"coat_pattern",
"color2",
"Periods",
"Period.Range",
"outcome_age_.years.",
"breed1",
"breed2")
cats[,redundant] <- list(NULL)
names(cats)
gsub( "*", "", as.character(cats$name), n)
gsub( "*", "", as.character(cats$name))
View(cats)
gsub( "*", "", cats$name)
View(cats)
gsub( "*", "", cats)
View(cats)
cats$name <- gsub( "[*]","", cats$name)
View(cats)
save.image("D:/Mgr_Inf/Rstudio/Proj2-DataMining/2.RData")
savehistory("D:/Mgr_Inf/Rstudio/Proj2-DataMining/2.Rhistory")
# input cats_f into target data_frame - it's easier to repeat steps
cats <- cats_f
# input cats_f into target data_frame - it's easier to repeat steps
cats <- cats_f
cats <- cats_f
names(cats)
# by specific column name
cats$age_upon_outcome <- NULL
names(cats)
#by columns names, #vector with columns to delete:
redundant <- c("age_upon_outcome",
"animal_id",
"animal_type",
"color",
"date_of_birth",
"datetime",
"monthyear",
"outcome_subtype",
"sex_upon_outcome",
"count",
"Periods",
"Period.Range",
"sex_age_outcome",
"dob_monthyear",
)
redundant <- c("age_upon_outcome",
"animal_id",
"animal_type",
"color",
"date_of_birth",
"datetime",
"monthyear",
"outcome_subtype",
"sex_upon_outcome",
"count",
"Periods",
"Period.Range",
"sex_age_outcome",
"dob_monthyear"
)
cats[,redundant] <- list(NULL)
names(cats)
savehistory("D:/Mgr_Inf/Rstudio/Proj2-DataMining/2.RData")
save.image("D:/Mgr_Inf/Rstudio/Proj2-DataMining/2.RData")
savehistory("D:/Mgr_Inf/Rstudio/Proj2-DataMining/2.Rhistory")
